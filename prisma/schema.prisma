// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quiz {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  questions   Question[] // One-to-Many relationship with Question
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  results     QuizResult[] // Fix: Establish bidirectional relation with QuizResult

  // One-to-Many: The user who created the quiz
  createdBy   User   @relation("UserCreatedQuizzes", fields: [createdById], references: [id])
  createdById String // Foreign key to track quiz creator
}

model Question {
  id       Int      @id @default(autoincrement())
  question String
  quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId   Int // Foreign key for one-to-many relationship with Quiz
  choices  Choice[] // One-to-Many relationship with Choice
  answers  Answer[] // Fix: Establish bidirectional relation with Answer
  Explanation Explanation[] // One-to-Many relationship with Explanation
}

model Explanation {
  id         String   @id @default(cuid())
  explanation String
  quizResult   QuizResult @relation(fields: [quizResultId], references: [id], onDelete: Cascade)
  quizResultId String      
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  isCorrect  Boolean
  createdAt  DateTime @default(now())
}

model Choice {
  id         String         @id @default(uuid())
  choice     String
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  isCorrect  Boolean
  answers    AnswerChoice[] // Many-to-Many relationship with Answer via AnswerChoice
}

model QuizResult {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId      Int
  answers     Answer[] // One-to-Many relationship with Answer
  score       Int // Total correct answers
  createdAt   DateTime @default(now())
  isCompleted Boolean  @default(false)
  explanation Explanation[] // One-to-Many relationship with Explanation
}

model Answer {
  id           String         @id @default(cuid())
  quizResult   QuizResult     @relation(fields: [quizResultId], references: [id], onDelete: Cascade)
  quizResultId String
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   Int
  choices      AnswerChoice[] // Many-to-Many relationship with Choice via AnswerChoice
  isCorrect    Boolean
}

model AnswerChoice {
  id       String @id @default(cuid())
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId String
  choice   Choice @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  choiceId String

  @@unique([answerId, choiceId]) // Ensure each answer-choice combination is unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  // One-to-Many: Quizzes this user created
  createdQuizzes Quiz[] @relation("UserCreatedQuizzes")

  accounts    Account[]
  quizResults QuizResult[] // Fix: Establish bidirectional relation with QuizResult

  @@map("users")
}
